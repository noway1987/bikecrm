/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BikeService } from "../bike.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BikeCreateInput } from "./BikeCreateInput";
import { Bike } from "./Bike";
import { BikeFindManyArgs } from "./BikeFindManyArgs";
import { BikeWhereUniqueInput } from "./BikeWhereUniqueInput";
import { BikeUpdateInput } from "./BikeUpdateInput";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BikeControllerBase {
  constructor(
    protected readonly service: BikeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bike })
  @nestAccessControl.UseRoles({
    resource: "Bike",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBike(@common.Body() data: BikeCreateInput): Promise<Bike> {
    return await this.service.createBike({
      data: data,
      select: {
        battery: true,
        brakes: true,
        brand: true,
        cassette: true,
        chain: true,
        chainGuide: true,
        charger: true,
        crank: true,
        createdAt: true,
        damper: true,
        display: true,
        fork: true,
        frame: true,
        gear: true,
        handlebar: true,
        headset: true,
        id: true,
        kilometers: true,
        lever: true,
        model: true,
        motor: true,
        pedalArm: true,
        remote: true,
        seat: true,
        seatPost: true,
        seatPostRemote: true,
        stem: true,
        tires: true,
        updatedAt: true,
        wheelSet: true,
        year: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Bike] })
  @ApiNestedQuery(BikeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bike",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bikes(@common.Req() request: Request): Promise<Bike[]> {
    const args = plainToClass(BikeFindManyArgs, request.query);
    return this.service.bikes({
      ...args,
      select: {
        battery: true,
        brakes: true,
        brand: true,
        cassette: true,
        chain: true,
        chainGuide: true,
        charger: true,
        crank: true,
        createdAt: true,
        damper: true,
        display: true,
        fork: true,
        frame: true,
        gear: true,
        handlebar: true,
        headset: true,
        id: true,
        kilometers: true,
        lever: true,
        model: true,
        motor: true,
        pedalArm: true,
        remote: true,
        seat: true,
        seatPost: true,
        seatPostRemote: true,
        stem: true,
        tires: true,
        updatedAt: true,
        wheelSet: true,
        year: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bike",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bike(
    @common.Param() params: BikeWhereUniqueInput
  ): Promise<Bike | null> {
    const result = await this.service.bike({
      where: params,
      select: {
        battery: true,
        brakes: true,
        brand: true,
        cassette: true,
        chain: true,
        chainGuide: true,
        charger: true,
        crank: true,
        createdAt: true,
        damper: true,
        display: true,
        fork: true,
        frame: true,
        gear: true,
        handlebar: true,
        headset: true,
        id: true,
        kilometers: true,
        lever: true,
        model: true,
        motor: true,
        pedalArm: true,
        remote: true,
        seat: true,
        seatPost: true,
        seatPostRemote: true,
        stem: true,
        tires: true,
        updatedAt: true,
        wheelSet: true,
        year: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bike",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBike(
    @common.Param() params: BikeWhereUniqueInput,
    @common.Body() data: BikeUpdateInput
  ): Promise<Bike | null> {
    try {
      return await this.service.updateBike({
        where: params,
        data: data,
        select: {
          battery: true,
          brakes: true,
          brand: true,
          cassette: true,
          chain: true,
          chainGuide: true,
          charger: true,
          crank: true,
          createdAt: true,
          damper: true,
          display: true,
          fork: true,
          frame: true,
          gear: true,
          handlebar: true,
          headset: true,
          id: true,
          kilometers: true,
          lever: true,
          model: true,
          motor: true,
          pedalArm: true,
          remote: true,
          seat: true,
          seatPost: true,
          seatPostRemote: true,
          stem: true,
          tires: true,
          updatedAt: true,
          wheelSet: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bike })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bike",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBike(
    @common.Param() params: BikeWhereUniqueInput
  ): Promise<Bike | null> {
    try {
      return await this.service.deleteBike({
        where: params,
        select: {
          battery: true,
          brakes: true,
          brand: true,
          cassette: true,
          chain: true,
          chainGuide: true,
          charger: true,
          crank: true,
          createdAt: true,
          damper: true,
          display: true,
          fork: true,
          frame: true,
          gear: true,
          handlebar: true,
          headset: true,
          id: true,
          kilometers: true,
          lever: true,
          model: true,
          motor: true,
          pedalArm: true,
          remote: true,
          seat: true,
          seatPost: true,
          seatPostRemote: true,
          stem: true,
          tires: true,
          updatedAt: true,
          wheelSet: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customers")
  @ApiNestedQuery(CustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async findCustomers(
    @common.Req() request: Request,
    @common.Param() params: BikeWhereUniqueInput
  ): Promise<Customer[]> {
    const query = plainToClass(CustomerFindManyArgs, request.query);
    const results = await this.service.findCustomers(params.id, {
      ...query,
      select: {
        address: true,
        city: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        phone: true,
        updatedAt: true,
        zipCode: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Bike",
    action: "update",
    possession: "any",
  })
  async connectCustomers(
    @common.Param() params: BikeWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        connect: body,
      },
    };
    await this.service.updateBike({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Bike",
    action: "update",
    possession: "any",
  })
  async updateCustomers(
    @common.Param() params: BikeWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        set: body,
      },
    };
    await this.service.updateBike({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Bike",
    action: "update",
    possession: "any",
  })
  async disconnectCustomers(
    @common.Param() params: BikeWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        disconnect: body,
      },
    };
    await this.service.updateBike({
      where: params,
      data,
      select: { id: true },
    });
  }
}
